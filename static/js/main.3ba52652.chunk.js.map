{"version":3,"sources":["components/Alarm/index.tsx","components/Report/index.tsx","MqttManager.ts","components/MainLayout/index.tsx","serviceWorker.ts","index.tsx"],"names":["AlarmList","props","arr","msg","retval","name","values","topic","push","value","dictToArr","alarms","react_default","a","createElement","map","item","card","title","style","background","display","flexDirection","flexWrap","itr","width","margin","Report","list","dataSource","logs","itemLayout","renderItem","Item","padding","minHeight","marginBottom","Meta","fontSize","timestamp","description","station","time","MqttManager","setServerStatus","setValues","settings","fetch","then","x","json","catch","console","log","options","keepalive","clientId","Math","random","toString","substr","protocolId","protocolVersion","clean","reconnectPeriod","connectTimeout","will","payload","qos","retain","rejectUnauthorized","data","message","color","unmount","val","username","user_name","password","protocol","servers","host","mqtt_server","port","client","mqtt","connect","devices","forEach","dev","subscribe","concat","on","connected","_registerErrors","_topic$split","split","_topic$split2","Object","slicedToArray","device","func","topic_id","undefined","finalval","_registerChanges","end","Header","Layout","Content","Footer","Sider","MainLayout","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mqtt_sub","timerID","onCollapse","collapsed","setState","onSelect","param","content","key","state","timeout","updateTime","status","_this2","Date","now","setInterval","_this3","layout","collapsible","className","menu","theme","defaultSelectedKeys","mode","icon","type","textAlign","textTransform","textOverflow","es_alert","showIcon","textJustify","marginTop","Alarm","components_Report","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","MainLayout_MainLayout","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ba52652.chunk.js","sourcesContent":["import React from 'react'\r\nimport { List, Progress } from 'antd';\r\nimport { Row, Col, Card } from 'antd';\r\nimport { IMessage } from '../../MqttManager';\r\n\r\nlet timeout = 30;\r\n\r\nfunction calculateColor(time: number) {\r\n    let r = 0;\r\n    let g = 20;\r\n    let b = 20;\r\n    r = Math.min((time / timeout), 1) * 255;\r\n    b = Math.max(0, 1 - (time / timeout)) * 255;\r\n    return `rgb(${r}, ${g}, ${b})`;\r\n}\r\n\r\nfunction ShouldPlayAlarm(alarms: IMessage) {\r\n    for (let alarm in alarms) {\r\n        if (Number(alarms[alarm].time) > timeout) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\ninterface IMessageArray {\r\n    name: string;\r\n    values: { topic: string, value: string }[];\r\n}\r\n\r\nfunction dictToArr(msg: IMessage) {\r\n    let retval: IMessageArray[] = []\r\n    for (let name in msg) {\r\n        let values: { topic: string, value: string }[] = []\r\n        for (let topic in msg[name]) {\r\n            values.push({ topic, value: msg[name][topic] })\r\n        }\r\n\r\n        retval.push({ name, values,  });\r\n    }\r\n\r\n    // console.log(retval);\r\n    return retval;\r\n}\r\n\r\nfunction setDisconnect(timeout: boolean){\r\n    if(timeout){\r\n        return 'red';\r\n    }\r\n    else{\r\n        return '#FAFAFA';\r\n    }\r\n}\r\n\r\nconst AlarmList = (props: { alarms: IMessage }) => {\r\n    let arr = dictToArr(props.alarms);\r\n    return (\r\n        <div>\r\n            {arr.map(item => {\r\n                return (\r\n                    <div>\r\n                        <Card title={item.name} style={{background:'#FAFAFA'}}>\r\n                            <div style={{display:'flex', flexDirection:'row', flexWrap:'wrap'}}>\r\n                                {item.values.map(itr => {\r\n                                    return (\r\n                                        <Card title={itr.topic} style={{width:'200px', margin:'5px 5px', background:'#EFFBFB'}}>\r\n                                            {itr.value}\r\n                                        </Card>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n\r\n                        </Card>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AlarmList;\r\n","import React from 'react'\r\nimport { List } from 'antd';\r\n\r\nexport interface ILog{\r\n    timestamp: string;\r\n    station: string;\r\n    time: string;\r\n}\r\n\r\nconst Report = (props: {logs: ILog[]}) => {\r\n    return (\r\n        <div>\r\n            <List dataSource={props.logs} itemLayout=\"horizontal\"\r\n                renderItem={item => (\r\n                    <List.Item style={{ margin: '2px 3px', padding: '5px', minHeight:'20px', marginBottom:'10px'}}>\r\n                        <List.Item.Meta\r\n                            title={\r\n                                <div style={{ fontSize:'20px'}}>{item.timestamp}</div>}\r\n                            \r\n                            description={                               \r\n                                <div style={{ fontSize:'20px'}}>{item.station} active for {item.time}</div>}\r\n                        />\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Report\r\n\r\n","import mqtt, { IClientOptions } from \"mqtt\"\r\nimport { string } from \"prop-types\";\r\n\r\nexport interface ServerStatus{\r\n    message: string;\r\n    color: \"success\" | \"error\" | \"warning\" | \"info\" | undefined;\r\n}\r\n\r\nexport interface IMessage{\r\n    [id: string] : {[topic: string]: string};\r\n}\r\n\r\ninterface ISettings{\r\n    mqtt_server: string,\r\n    port: number,\r\n    user_name: string,\r\n    protocol: 'wss' | 'ws' | 'mqtt' | 'mqtts' | 'tcp' | 'ssl' | 'wx' | 'wxs',\r\n    password: string,\r\n    devices:string[]\r\n}\r\n\r\nexport default function MqttManager(setServerStatus:(val: ServerStatus) => void, setValues:(val: IMessage) => void){\r\n    let settings:Promise<ISettings> = fetch('assets/config/settings.json')\r\n                    .then(x => x.json())\r\n                    .catch(x => console.log(x));\r\n    let clientId = 'mqttjs_' + Math.random().toString(16).substr(2, 8);\r\n\r\n    let options:IClientOptions = {\r\n        keepalive: 10,\r\n        clientId: clientId,\r\n        protocolId: 'MQTT',\r\n        protocolVersion: 4,\r\n        clean: true,\r\n        reconnectPeriod: 1000,\r\n        connectTimeout: 5000,\r\n        will: {\r\n            topic: 'WillMsg',\r\n            payload: 'Connection Closed abnormally..!',\r\n            qos: 0,\r\n            retain: false\r\n        },\r\n        rejectUnauthorized: false\r\n    }\r\n\r\n    let data: IMessage = {};\r\n\r\n    setServerStatus({message:'Connecting ', color: \"info\"});\r\n    setValues(data);\r\n\r\n    let _registerChanges = (client:mqtt.MqttClient) => {\r\n        console.log('_registerChanges');\r\n        client.on('message', (topic, msg) => {\r\n            //console.log(topic);\r\n\r\n            let [device, func, topic_id ] = topic.split('/');\r\n            if(data[device] === undefined){\r\n                data[device] = {}\r\n            }\r\n            let finalval = msg.toString();\r\n            if(func === 'dio'){\r\n                finalval = finalval === '1'? 'ON': 'OFF';\r\n            }\r\n            data[device][topic_id] = finalval;           \r\n            setValues(data);\r\n        });\r\n    }\r\n\r\n    let _registerErrors = (client: mqtt.MqttClient) => {\r\n        client.on('connect', () => {\r\n            console.log('Connected');\r\n            setServerStatus({ message: 'Connection succeessful', color: \"success\" });\r\n        });\r\n        client.on('reconnect', () => {\r\n            console.log('connecting error');\r\n            if(!client.connected){\r\n                setServerStatus({ message: 'connection failed', color: \"error\" });\r\n            }\r\n        });\r\n        client.on('error', () => {\r\n            console.log('connection error');\r\n            setServerStatus({ message: 'connection failed ', color: \"error\" });\r\n        });\r\n    }\r\n\r\n    let unmount: any = null;\r\n    settings.then(val =>{\r\n        //console.log(val.mqtt_server, options);\r\n        options.username = val.user_name;\r\n        options.password = val.password;\r\n        options.protocol = val.protocol;\r\n        options.servers = [{\r\n            host: val.mqtt_server,\r\n            port: val.port,\r\n            protocol: val.protocol\r\n        }];\r\n        //console.log(val);\r\n        let client  = mqtt.connect(options);\r\n\r\n        // console.log(\"all dev\", `${val.devices}`);\r\n        val.devices.forEach(dev => {\r\n            // console.log(\"topic sub\", `${dev}`);\r\n            client.subscribe(`${dev}/dio/#`);\r\n            client.subscribe(`${dev}/temp/#`);\r\n        });\r\n            \r\n        console.log('connection sub', val.mqtt_server);\r\n        setServerStatus({message:'Connecting ', color: \"warning\"})\r\n        _registerErrors(client);\r\n        _registerChanges(client);\r\n\r\n        unmount = () => {\r\n            console.log('disconnecting');\r\n            client.end(true)};\r\n    });\r\n\r\n    return unmount;\r\n}","import React from 'react';\nimport './index.css';\n\nimport { Layout, Menu, Icon, Badge, Alert } from 'antd';\nimport AlarmList from '../Alarm/index';\nimport Report from '../Report/index';\n\nimport { SelectParam } from 'antd/lib/menu';\nimport MqttManager, { ServerStatus, IMessage } from '../../MqttManager';\n\nconst { Header, Content, Footer, Sider } = Layout;\n\ninterface IState {\n  collapsed: boolean,\n  content: string,\n  alarms: IMessage,\n  updateTime : number,\n  timeout: boolean,\n  status: ServerStatus\n}\n\nlet logs = {\"log\": [\n  {\"timestamp\":\"21/06/2019 05:02:00 PM\", \"station\": \"Station 1\", \"time\": \"00:15:00\"},\n  {\"timestamp\":\"21/06/2019 05:01:00 PM\", \"station\": \"Station 2\", \"time\": \"00:12:00\"},\n  {\"timestamp\":\"21/06/2019 04:01:00 PM\", \"station\": \"Station 3\", \"time\": \"00:23:45\"},\n]}\n\nexport default class MainLayout extends React.Component<any, IState> {\n  mqtt_sub: any;\n  timerID: any;\n  /**\n   *\n   */\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      collapsed: false,\n      content: \"1\",\n      alarms: {},\n      timeout: false,\n      updateTime : 0,\n      status: { color: \"info\", message: \"Initializing\" }\n    };\n  }\n\n  componentDidMount() {\n    this.mqtt_sub = MqttManager((val: ServerStatus) => {\n      this.setState({ status: val });\n    },\n      (val: IMessage) => {\n        this.setState({ alarms: val, updateTime: Date.now(), timeout: false });\n        //console.log(val);\n      });\n\n      this.timerID = setInterval(\n        () => {\n          if((Date.now() - this.state.updateTime) > 3900){\n            this.setState({ timeout: true });\n          }\n        },\n        4000\n      );\n  }\n\n  componentWillUnmount() {\n    this.mqtt_sub();\n  }\n\n  onCollapse = (collapsed: boolean) => {\n    this.setState({ collapsed });\n  };\n\n  onSelect = (param: SelectParam) => {\n    this.setState({ content: param.key });\n  };\n\n  render() {\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse}>\n          <div className=\"logo\" style={{ margin: '5px 10px' }}>\n          </div>\n          <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\" onSelect={this.onSelect}>\n            <Menu.Item key=\"1\">\n              <Icon type=\"warning\" />\n              <span>Alarms</span>\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              <Icon type=\"database\" />\n              <span>Report</span>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header style={{ background: '#fff', padding: 0, textAlign: \"center\", fontSize: 20 }}>\n            <div style={{marginBottom:'10px'}}>\n              <h1 className=\"title-header\" style={{ textTransform: 'uppercase', textOverflow: 'ellipsis' }}>Chiller Monitor</h1>\n              <Alert message={this.state.status.message} type={this.state.status.color} showIcon style={{ textAlign: \"left\", fontSize: 15, textOverflow: 'ellipsis', textJustify: 'inter-word', textTransform: 'capitalize' }} />\n            </div>\n          </Header>\n          <Content style={{ margin: '16px' }}>\n              <div style={{ padding: 24, background: '#fff', minHeight: 360, marginTop:'20px' }}>\n                {(() => {\n                  switch (this.state.content) {\n                    case \"1\": return <AlarmList alarms={this.state.alarms} />;\n                    case \"2\": return <Report logs={logs.log}/>;\n                    default: return <div>Unknown option selected</div>;\n                  }\n                })()}\n              </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>Chiller Monitor 2019 Created by Aimtech</Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainLayout from './components/MainLayout/index';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MainLayout />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}